stages:
  data_ingestion:
    cmd: python src/cnnClassifier/pipeline/stage_01_data_ingestion.py
    deps:
      - src/cnnClassifier/pipeline/stage_01_data_ingestion.py
      - config/config.yaml
    outs:
      - artifacts/data_ingestion/Chicken-fecal-images


  prepare_base_model:
    cmd: python src/cnnClassifier/pipeline/stage_02_prepare_base_model.py
    deps:
      - src/cnnClassifier/pipeline/stage_02_prepare_base_model.py
      - config/config.yaml
    params:
      - IMAGE_SIZE
      - INCLUDE_TOP
      - CLASSES
      - WEIGHTS
      - LEARNING_RATE
    outs:
      - artifacts/prepare_base_model



  training:
    cmd: python src/cnnClassifier/pipeline/stage_03_training.py
    deps:
      - src/cnnClassifier/pipeline/stage_03_training.py
      - src/cnnClassifier/components/prepare_callbacks.py
      - config/config.yaml
      - artifacts/data_ingestion/Chicken-fecal-images
      - artifacts/prepare_base_model
    params:
      - IMAGE_SIZE
      - EPOCHS
      - BATCH_SIZE
      - AUGMENTATION
    outs:
      - artifacts/training/model.h5


  

  evaluation:
    cmd: python src/cnnClassifier/pipeline/stage_04_evaluation.py
    deps:
      - src/cnnClassifier/pipeline/stage_04_evaluation.py
      - config/config.yaml
      - artifacts/data_ingestion/Chicken-fecal-images
      - artifacts/training/model.h5
    params:
      - IMAGE_SIZE
      - BATCH_SIZE
    metrics:
    - scores.json:
        cache: false


#This code represents the dvc.yaml file, which is a configuration file used by DVC (Data Version Control) to define stages in a machine learning pipeline. Each stage represents a specific step in the pipeline, and the dvc.yaml file specifies the commands, dependencies, parameters, and outputs associated with each stage. Here's an explanation of the code:
#
#Stage: data_ingestion
#
#cmd: Specifies the command to execute for this stage, which is running the stage_01_data_ingestion.py script.
#deps: Lists the dependencies required for this stage, including the stage_01_data_ingestion.py script and the config.yaml configuration file.
#outs: Specifies the output directory artifacts/data_ingestion/Chicken-fecal-images generated by this stage.
#Stage: prepare_base_model
#
#cmd: Specifies the command to execute for this stage, which is running the stage_02_prepare_base_model.py script.
#deps: Lists the dependencies required for this stage, including the stage_02_prepare_base_model.py script and the config.yaml configuration file.
#params: Defines a list of parameters (IMAGE_SIZE, INCLUDE_TOP, CLASSES, WEIGHTS, LEARNING_RATE) that can be customized for this stage.
#outs: Specifies the output directory artifacts/prepare_base_model generated by this stage.
#Stage: training
#
#cmd: Specifies the command to execute for this stage, which is running the stage_03_training.py script.
#deps: Lists the dependencies required for this stage, including the stage_03_training.py script, prepare_callbacks.py module, config.yaml configuration file, and the outputs from the data_ingestion and prepare_base_model stages.
#params: Defines a list of parameters (IMAGE_SIZE, EPOCHS, BATCH_SIZE, AUGMENTATION) that can be customized for this stage.
#outs: Specifies the output file artifacts/training/model.h5 generated by this stage.
#Stage: evaluation

#cmd: Specifies the command to execute for this stage, which is running the stage_04_evaluation.py script.
#deps: Lists the dependencies required for this stage, including the stage_04_evaluation.py script, config.yaml configuration file, and the outputs from the data_ingestion and training stages.
#params: Defines a list of parameters (IMAGE_SIZE, BATCH_SIZE) that can be customized for this stage.
#metrics: Specifies the metrics to be tracked for this stage. In this case, it's scores.json, and cache: false indicates that the file should not be cached.
#These stages represent different steps of a machine learning pipeline, starting from data ingestion, preparing the base model, training the model, and finally evaluating the model. The dvc.yaml file helps track the dependencies and outputs of each stage, ensuring reproducibility and version control in the pipeline.